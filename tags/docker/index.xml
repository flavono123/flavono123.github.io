<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>docker on flavono123</title><link>https://flavono123.github.io/tags/docker/</link><description>Recent content in docker on flavono123</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Sun, 08 May 2022 16:45:29 +0900</lastBuildDate><atom:link href="https://flavono123.github.io/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>K8s CRI와 containerd 설치</title><link>https://flavono123.github.io/posts/containerd-as-kubernetes-cri/</link><pubDate>Sun, 08 May 2022 16:45:29 +0900</pubDate><guid>https://flavono123.github.io/posts/containerd-as-kubernetes-cri/</guid><description>kubeadm으로 쿠버네티스 클러스터를 구성하던 중 컨테이너 런타임 설치 부분에서 혼란이 있었다. 전부터 containerd, 런타임, 쿠버네티스의 도커 지원 중단 같은 이야기를 들었지만 명확히 알진 않았다.
따라서 컨테이너 런타임이 무엇인지, 또 구성하게 될 쿠버네티스 클러스터에선 containerd가 어떤 역할을 할지 정리한다.
도커 역사와 구조 변화 이 내용은 Docker Deep Dive의 파트1 2장 Docker와 파트2 5장 The Docker Engine을 참고했다. 그리고 책에서 말하듯, 도커의 구조는 도커와 OCI의 역사 관련한 설명을 빼고 설명하기가 어렵다. 특히 역사, 과거의 사건, 관련해선 저자의 말을 빌려 간단하게 압축하여 설명한다.</description></item><item><title>Dockerfile Best Practices</title><link>https://flavono123.github.io/posts/dockerfile-best-practices/</link><pubDate>Tue, 19 Apr 2022 10:07:58 +0900</pubDate><guid>https://flavono123.github.io/posts/dockerfile-best-practices/</guid><description>https://docs.docker.com/develop/develop-images/dockerfile_best-practices/
위 가이드는 CKS를 공부하던 중 multi-stage build라는 키워드로 유입됐다. 회사에서도 컨테이너라이즈를 하는 중이라 한번 읽고 정리하며 몇가지 실험을 해봤다(그리고 후술하지만, 이 문서를 포함해 도커 문서는 최신화가 덜 되어 있다. 다른 레퍼런스나 질문도 그리고 직접 실험하는 것도 활용해보자)
Dockerfile은 도커 이미지를 만드는 명령을 써 놓은 파일이다. Dockerfile을 잘 쓰는 것은 &amp;lsquo;어떻게 좋은 도커 이미지를 만들 것인가&amp;rsquo;에 대한 답이다. 좋은 도커 이미지란 가능한 작은 크기의 이미지를 말한다. 작은 이미지는 다음과 같은 이점이 있다:</description></item><item><title>CKA 시험 후기와 Security Context - 리눅스 네임스페이스, capabilities</title><link>https://flavono123.github.io/posts/cka-security-context/</link><pubDate>Fri, 25 Feb 2022 18:24:34 +0900</pubDate><guid>https://flavono123.github.io/posts/cka-security-context/</guid><description>이전까지 쓰던 CKA 강의 정리 글을 중단하고, 남은 섹션 빠르게 공부한 후, 합격했다&amp;hellip;
인터넷에 보면 시험 (합격)후기 글이 많다. 시험 팁과 관련된 내용이 주로 있고 나도 그런 글 도움을 많이 받았다. 하지만 나는 조금 다른 이야길 해보려 한다.
우선 강의와 더불어 시험을 보는 과정에서 배우는 것들이 좋았다. 어찌보면 난 컨테이너(도커)는 아주 깔짝, 리눅스도 깔짝 알고 있는 수준이었다는게 드러났다. 예컨데 나는 리눅스 네트워크는 꽤 잘 안다고 착각했다. 이유는 (지금 생각하면 조금 어이 없지만) on-premise 호스트에서 DHCP를 쓰지 않고 정적으로 IP를 할당했기 때문에 그렇다고 생각했다.</description></item><item><title>Minikube로 Docker Desktop를 대체해보며 쿠버네티스 통빡으로 맞춰보기</title><link>https://flavono123.github.io/posts/minikube-replace-docker-desktop/</link><pubDate>Tue, 04 Jan 2022 00:51:44 +0900</pubDate><guid>https://flavono123.github.io/posts/minikube-replace-docker-desktop/</guid><description>https://novemberde.github.io/post/2021/09/02/podman-minikube/
이 글을 읽고 회사 개발 계정 메일로 오던 도커에서 프로모 코드 뿌리는, 확인 안하던, 메일들이 생각났다.
역시 도커 데스크탑이 유료로 바뀌니 주는 할인 코드였고 마침 쿠버네티스에 대한 관심도가 마구마구 오르는 시기라 호기롭게 위 포스팅을 따라하였다.
도커 데스크탑을 삭제하고 minikube 와 kompose 설치, 기존 docker-compose 파일을 변환해서 apply 까지 마쳤다. 마침 대상으로 해본 docker-compose 의 이미지들은 어차피 로컬(맥)에선 잘 안도는거라, 컨테이너가 잘 띄워졌는지 확인하진 않았다(솔직히 쿠버네티스도 컨테이너를 띄우는가? 도커를 대체한다니깐 그러지 않을까?</description></item></channel></rss>