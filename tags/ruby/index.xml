<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ruby on flavono123</title><link>https://flavono123.github.io/tags/ruby/</link><description>Recent content in ruby on flavono123</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Fri, 03 Jun 2022 15:13:34 +0900</lastBuildDate><atom:link href="https://flavono123.github.io/tags/ruby/index.xml" rel="self" type="application/rss+xml"/><item><title>Rubocop Custom Cop</title><link>https://flavono123.github.io/posts/rubocop-custom-cop/</link><pubDate>Fri, 03 Jun 2022 15:13:34 +0900</pubDate><guid>https://flavono123.github.io/posts/rubocop-custom-cop/</guid><description>나는 rubocop을 정말 좋아한다. Rubocop엔 이미 내장된, lint 규칙의 단위인, cop이 정말 많다. 좀 nit-picking 같은 offense도 많지만, 왜 이런 규칙이 있을까 생각해보는게 재밌다. 예를 들어 메소드 줄 길이를 제한하는 Metrics/MethodLength는 기본 값이 10이다(내 기억에 한때 5였고, 문서의 예시처럼 여러 줄을 score로 세지 않았던거 같다. 샌디 메츠가 따로 없었다).
이렇다 보니 rubocop을 업그레이드하면 수 많은 새 cop의 offenses가 나온다. 비활성화 또는 파라미터를 바꾸는 정도의 커스텀을 했다. 하지만 rubocop의 내장 cop을 조정하는게 아니라, 우리 코드에 맞는 규칙(cop)을 만들고 싶을 때도 있을 것이다.</description></item><item><title>Vagrant byebug로 디버깅하기</title><link>https://flavono123.github.io/posts/byebug-vagrant/</link><pubDate>Mon, 07 Mar 2022 00:38:49 +0900</pubDate><guid>https://flavono123.github.io/posts/byebug-vagrant/</guid><description>Vagrant를 쓰던 중 byebug로 breakpoint를 잡고 디버깅 해보고 싶어졌다. 이 글을 참고했으나, 난 pry, pry-byebug가 아닌 byebug를 사용했다(과거엔 저렇게 썼다고 들었다). 또 글과 달리, (이젠) 맥에서 brew로 설치한 vagrant는 소스 코드를 받아 실행하지 않는걸로 보인다.
먼저 원래 쓰고 있던 brew로 설치한 vagrant를 지운다:
❯ brew uninstall vagrant 문서대로 vagrant를 코드를 받아 설치한다:
❯ git clone https://github.com/hashicorp/vagrant.git ❯ cd vagrant ❯ bundle install ❯ bundle --binstubs exec # Deprecation warning ❯ cd /usr/local/bin/ ❯ ln -sf /path/to/vagrant/exec/vagrant bundle --binstubs exec을 실행하면 deprecation warning이 나올 것이다.</description></item></channel></rss>