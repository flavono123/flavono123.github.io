<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ansible on flavono123</title><link>https://flavono123.github.io/tags/ansible/</link><description>Recent content in ansible on flavono123</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><lastBuildDate>Thu, 15 Sep 2022 10:28:13 +0900</lastBuildDate><atom:link href="https://flavono123.github.io/tags/ansible/index.xml" rel="self" type="application/rss+xml"/><item><title>Ansible에서 unprivileged become_user 실패</title><link>https://flavono123.github.io/posts/ansible-needs-to-create-when-becoming-an-unprivileged-user/</link><pubDate>Thu, 15 Sep 2022 10:28:13 +0900</pubDate><guid>https://flavono123.github.io/posts/ansible-needs-to-create-when-becoming-an-unprivileged-user/</guid><description>Ansible 태스크에서 become: yes를 사용해 sudo처럼 루트 권한으로 명령을 실행한다. 예를 들면 Ubuntu에서 apt 패키지를 쓸 때 사용할 수 있다. 하지만 루트가 아닌 특정 사용자로 실행해야 하는 명령도 있다. 최근에 MaxScale을 2.5 버전으로 업그레이드 했는데, 구성 확인 명령이 이전과 달리 maxscale 사용자만 실행할 수 있도록 강제하고 있다:
$ whoami ubuntu $ maxscale --config-check info : MaxScale will be run in the terminal process. 2022-09-15 10:34:01 notice : Worker message queue size: 1MiB 2022-09-15 10:34:01 warning: Number of threads set to 8, which is greater than the number of processors available: 1 2022-09-15 10:34:01 warning: Number of threads set to 8, which is greater than the number of processors available: 1 2022-09-15 10:34:01 notice : Using up to 296.</description></item><item><title>Ansible Gathering Facts 하지 않기</title><link>https://flavono123.github.io/posts/ansible-suppress-gathering-facts/</link><pubDate>Sat, 06 Aug 2022 10:42:32 +0900</pubDate><guid>https://flavono123.github.io/posts/ansible-suppress-gathering-facts/</guid><description>Ansible playbook을 실행하면 항상 Gathering Facts를 한다:
❯ ansible-playbook playbook.yml [options...] PLAY [어쩔 플레이북] *************************************************************************** task [Gathering Facts] ************************************************************************* ok: [host_a] TASK [task1 : 어쩔 태스크] ********************************************************************* ok: [host_a] TASK [task1 : 저쩔 태스크] ********************************************************************* ok: [host_a] ... 하지만 수집한 facts를 쓰지 않아 불필요할 때가 많다. 또 playbook이, 여러 roles를 로드하는 식으로, 여러 play를 실행한다면 Gathering Facts가 각각 실행한다. 이 때 특정 태스크만 태그로 필터하여 play하고 싶다면 모든 play에서의 Gathering Facts는 확실히 불필요하다:</description></item><item><title>Ansible 커스텀 필터 from_toml, to_toml</title><link>https://flavono123.github.io/posts/ansible-filter-plugins-from-to-toml/</link><pubDate>Tue, 03 May 2022 09:10:13 +0900</pubDate><guid>https://flavono123.github.io/posts/ansible-filter-plugins-from-to-toml/</guid><description>TOML은 YAML/JSON 보단 빈도는 적지만 설정 파일 포맷으로 쓰이는 곳이 있다. 그래서인지 Ansible에 from_yaml, to_yaml, from_json, to_json 등의 Jinja2 필터는 있지만, TOML용 필터는 없다.
쓸 일이 있기도 해서 Ansible에서 사용할 수 있는 from_toml, to_toml Jinja2 필터를 만들어 본다. 또 나는 파이썬을 잘 모르지만 필터를 작성하는데엔 무리가 없었다. 다만 같은 이유로 이 글에서 파이썬과 관련한 자세한 설명은 생략한다.
준비 빈 경로에 다음과 같은 파일을 써준다:
❯ tree . . ├── localhost └── var.</description></item><item><title>여러 호스트에 간단한 명령하기(Ansible vs. PSSH)</title><link>https://flavono123.github.io/posts/ansible-pssh/</link><pubDate>Thu, 24 Mar 2022 11:46:14 +0900</pubDate><guid>https://flavono123.github.io/posts/ansible-pssh/</guid><description>이 글은 프로비저닝 툴로써 Ansible과 PSSH를 비교하는 글이 아니다. 간단한 명령을 할 때 Ansible과 PSSH 둘 다 사용해보고 비교하는 글이다.
나는 프로비저닝 툴로썬 Ansible을 이미 쓰고 있는데, 막상 간단한 명령을 하려니 &amp;ldquo;PSSH를 쓰는게 더 쉬운가?&amp;rdquo; 라는 생각이 들었다. 상황은 간단하게 각 호스트의 공인 IP를 알아내는 것이다. 각 호스트에서 curl ifconfig.me 를 실행하고 출력을 확인해야 한다.
PSSH ❯ pssh --version 2.3.1 호스트 인자로 인벤토리 파일 활용 앞서 말한 듯 Ansible을 사용하고 있는 상황이기 때문에 PSSH의 호스트 인자로 Ansible의 인벤토리 INI 파일을 쓸 것이다.</description></item><item><title>Ansible로 모든 VM을 SSH 연결하기</title><link>https://flavono123.github.io/posts/ansible-ssh-keygen/</link><pubDate>Tue, 08 Mar 2022 23:27:10 +0900</pubDate><guid>https://flavono123.github.io/posts/ansible-ssh-keygen/</guid><description>언제나 그렇듯 삽질 후 깔끔하게 정리한다. VM끼리 ssh로 연결하고 싶었다. 보통은 쉘 스크립트로 프로비저닝했다. 그런데 ansible로 해보니 몇가지 어려운 점이 있었다:
authorized_keys를 만들 때 각 VM에서 만든 공개키를 &amp;lsquo;모아야&amp;rsquo; 한다. SSH key를 &amp;lsquo;새로 만든 VM만&amp;rsquo; authorized_keys를 갱신해야 한다. SSH key gen은 Self-signed Certificate을 해보며 잘 이해해서 ansible-galaxy에 있는 community.crypto.openssh_keypair로 대체했다.
Special varibables VM을 up하고 아무도 SSH 키 쌍이 없는 상태에선 모두 키를 만들고 공개키를 모아서 모두의 authorized_keys 파일에 써주어야 한다.</description></item><item><title>MongoDB 모니터가 빠진 건에 대하여</title><link>https://flavono123.github.io/posts/mongodb-monitor/</link><pubDate>Wed, 23 Feb 2022 22:50:45 +0900</pubDate><guid>https://flavono123.github.io/posts/mongodb-monitor/</guid><description>어느 날, MongoDB 서버에서 CPU 사용율이 높다는 알람이 왔다. CPU 사용율은 금방 정상을 돌아왔지만, pmm-client가 설치되지 않아서 쿼리를 특정할 수 없었다. pmm-client는 MongoDB 각 멤버가 재시작 되면서(한때 장애로 failover를 밥 먹듯이 했다&amp;hellip;) server로부터 떨어진거 같았다. 최근엔 재시작 되는 일 없이 안정적으로 서비스 실행 중이라 다시 붙이기로 했다. 그리고 그 사이에 클러스터에 변화도 생겼는데 이것도 반영했다.
클러스터 구성 현재 클러스터 구성은 다음과 같다:
host1 host2 host3 host4 host5 host6 replicaset1 replicaset1 replicaset1 replicaset2 replicaset2 replicaset2 config config config router router router router router router 총 6대의 호스트에 설치되어 있다.</description></item></channel></rss>